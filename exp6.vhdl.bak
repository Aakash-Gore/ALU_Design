library ieee;
use ieee.std_logic_1164.all;



entity alu_beh is
generic(
operand_width : integer:=4);
port (
A: in std_logic_vector(operand_width-1 downto 0);
B: in std_logic_vector(operand_width-1 downto 0);
op: out std_logic_vector(5 downto 0)) ;
end alu_beh;


architecture a1 of alu_beh is
function add(A: in std_logic_vector(4 downto 0);
B: in std_logic_vector(4 downto 0))
return std_logic_vector is

variable sum = std_logic_vector(1 downto 0);
variable carry = std_logic_vector(1 downto 0);

-- Declare "sum" and "carry" variable
-- you can use aggregate to initialize the variables as shown below
-- variable variable_name : std_logic_vector(3 downto 0) := (others => '0');

begin

L1 : for i in 0 to 4 loop
         if i=0 then
			  sum(i) := A(i) Xor B(i) Xor '0';
			  carry(i) := A(i) and B(i);
			else 
			   sum(i) := A(i) xor B(i) xor carry(i-1);
				carry(i) := (A(i) and B(i)) or (carry(i-1) and (A(i) or B(i)));
			end if;
		end loop L1;
			

-- write logic for addition
-- Hint: Use for loop
return sum; --according to your logic you can change what you want to return
end add;



begin
alu : process( A, B)
variable sel : std_logic_vector(1 downto 0);
variable max : std_logic_vector(3 downto 0);
variable out1: std_logic_vector(3 downto 0);
variable C: std_logic_vector(4 downto 0);
variable D: std_logic_vector(4 downto 0);

--declare other variables
begin
-- complete VHDL code for various outputs of ALU based on select lines
sel(1) => A(3);
sel(0) => B(3);
case sel is
when "00" =>

if (A(2)='1' and B(2)='0')
    max = A;
elsif (A(2)='0' and B(2)='1')
    max = B;
elsif (A(1)='0' and B(1)='1')
    max = B;
elsif (A(1)='1' and B(1)='0')
    max = A;
elsif(A(0)='1' and B(0)='0')
    max = A;
elsif(A(0)='0' and B(0)='1')
    max = B;
else
    max <= ('0','0','0','0');

op(5) => '0';
op(4) => '0';
op(3) => '0';
op(2) => max(2);
op(1) => max(1);
op(0) => max(0);

when "01" =>

L2: for i in range 0 to 3 loop
          op(i) = A(i) and B(i);
	 end loop L2;
	 op(5)=>'0';
	 op(4)=>'0';
	 

when "10" =>

L3: for i in range 1 to 4 loop
        C(i) => A(i-1);
		  D(i) => A(i);
	 end loop L3;
C(0)=>'0';
D(4)=>'0';

op = add(C,D)

when "11" =>

if ((A(2)=B(2)) and (A(1)=B(1)) and (A(0)=B(0))) then
    op(5) => '0';
	 op(4) => '0';
	 L4: for in range 0 to 3 loop
	       op(i)=>A(i);
	 end loop L4;



end process ; -- alu
end a1 ; -- a1